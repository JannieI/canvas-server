// Model for dataConnections collection

// Imports
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const counterModel = require('./counters')

// Schema
const DataConnectionSchema = new Schema({
    id: Number,                             // Unique ID
    connectionName: String,                 // Name of the Connection, ie XIS MS SQL Server
    serverType: String,                     // Type of server, ie PostgreSQL, MySQL, etc
    serverName: String,                     // DNS Server Name or IP address, ending with optional :port
    port: String,                           // Port on the Server, maybe blank
    database: String,                       // Database to connect to
    authentication: String,                 // Type of authentication: usr & psw, OR login as me (ie using AD)
    username: String,                       // As entered by user
    password: String,                       // As entered by user - encrypted ?
    description: String,                    // Description of Connection

    // For later use
    defaultDatabase: String,  
    logFolder: String,
    logfileName: String,
    characterSet: String,
    language: String,
    serverOptions: String,

    // Generated by the system
    editedBy: String,                       // Last user who edited this task
    editedOn: Date,                         // Date this task was last edited
    createdBy: String,                      // UserID who created this task, can be System
    createdOn: {                            // Date task was created
        type: Date,
        // `Date.now()` returns the current unix timestamp as a Number,        default: Date.now
    }
});

// This pre-hook is called before the information is saved into the database
DataConnectionSchema.pre('save', function(next) {
    var doc = this;

    // Find in the counters collection, increment and update
    counterModel.findOneAndUpdate(
        {_id: 'dataConnections.id'},
        {$inc: { seq: 1} },
        { upsert: true, new: true },
        function(error, counter)   {
            if(error) {
                return next(error);
            };

            doc.id = counter.seq;
            next();
        }
    );
});

// Create Model: modelName, schema, collection
const DataConnectionModel = mongoose.model('dataConnections', DataConnectionSchema, 'dataConnections');

// Export
module.exports = DataConnectionModel;