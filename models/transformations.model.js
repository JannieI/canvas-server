// Model for transformations collection

// Imports
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const counterModel = require('./counters.model')

// Schema
const TransformationSchema = new Schema({
    id: Number,                             // Unique ID
    category: String,                       // Category, ie based on a Column, etc
    // NB: the name has to be unique: used so in code + else confusing to user
    name: String,                           // Name of transformation, ie FillBlank
    description: String,                    // Description of transformation

    // Parameter info
    nrParameters: Number,                   // Nr of parameters, to make sure all array below the same length
    parameterPlaceholder: [ String ],       // Placeholder info, ie Fill in nr of characters ...
    parameterTitle: [ String ],             // Title (tooltippie text)
    parameterDefaultValue: [ String ],      // Default Text / Value when creating a new record
    parameterHeading: [ String ],           // Heading of field on form, ie Left
    parameterType: [ String ],              // Type of field (string, numeric, boolean).  Blank means any

    // Generated by the system
    editedBy: String,                       // Last user who edited this task
    editedOn: Date,                         // Date this task was last edited
    createdBy: String,                      // UserID who created this task, can be System
    createdOn: {                            // Date task was created
        type: Date,
        // `Date.now()` returns the current unix timestamp as a Number,        default: Date.now
    }

});

// This pre-hook is called before the information is saved into the database
TransformationSchema.pre('save', function(next) {
    var doc = this;

    // Find in the counters collection, increment and update
    counterModel.findOneAndUpdate(
        {_id: 'transformations.id'},
        {$inc: { seq: 1} },
        { upsert: true, new: true },
        function(error, counter)   {
            if(error) {
                return next(error);
            };

            doc.id = counter.seq;
            next();
        }
    );
});

// Create Model: modelName, schema, collection
const TransformationModel = mongoose.model('transformations', TransformationSchema, 'transformations');

// Export
module.exports = TransformationModel;