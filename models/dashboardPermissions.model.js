// Model for dashboardPermissions collection

// Imports
const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const counterModel = require('./counters.model')

// Schema
const DashboardPermissionSchema = new Schema({
    id: Number,                             // Unique ID
    dashboardID: Number,                    // FK to D
    dashboardName: String,                  // Filled in @RunTime
    userID: String,                         // UserID - NB: 1 of usr/grp filled in, one blank
    groupID: Number,                        // Group ID
    groupName: String,                      // Filled in @RunTime
    canViewRight: Boolean,                  // True if can View this D
    canEditRight: Boolean,                  // True if can Edit this D
    canSaveRight: Boolean,                  // Can Save a D
    canDeleteRight: Boolean,                // True if can Delete this D
    canAddDatasource: Boolean,              // True if can Add a DS to this D
    canGrantAccess: Boolean,                // Can Delete a D
    grantor: String,                        // UserId who granted permission
    grantedOn: Date,                        // Date and time created or last updated

    // Generated by the system
    editedBy: String,                       // Last user who edited this task
    editedOn: Date,                         // Date this task was last edited
    createdBy: String,                      // UserID who created this task, can be System
    createdOn: {                            // Date task was created
        type: Date,
        // `Date.now()` returns the current unix timestamp as a Number,        default: Date.now
    }
});

// This pre-hook is called before the information is saved into the database
DashboardPermissionSchema.pre('save', function(next) {
    var doc = this;

    // Find in the counters collection, increment and update
    counterModel.findOneAndUpdate(
        {_id: 'dashboardPermissions.id'},
        {$inc: { seq: 1} },
        { upsert: true, new: true },
        function(error, counter)   {
            if(error) {
                return next(error);
            };

            doc.id = counter.seq;
            next();
        }
    );
});

// Create Model: modelName, schema, collection
const DashboardPermissionModel = mongoose.model('dashboardPermissions', DashboardPermissionSchema, 'dashboardPermissions');

// Export
module.exports = DashboardPermissionModel;